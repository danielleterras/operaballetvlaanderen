{"version":3,"sources":["logo.svg","components/Stories.jsx","App.js","serviceWorker.js","models/Story.js","api/index.js","store/index.js","index.js"],"names":["module","exports","__webpack_require__","p","inject","observer","_ref","store","stories","titleInput","React","createRef","react_default","a","createElement","Fragment","map","story","key","id","title","onSubmit","e","preventDefault","addStory","current","value","htmlFor","type","name","ref","App","components_Stories","Boolean","window","location","hostname","match","Story","_this","this","arguments","length","undefined","uuid","v4","Object","classCallCheck","setId","setTitle","updateFromServer","values","_id","decorate","observable","action","computed","Api","getAll","_callee","r","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","create","_callee2","_context2","getOptions","method","body","options","toUpperCase","headers","content-type","JSON","stringify","Store","asyncToGenerator","mark","newStory","push","api","then","storyValues","_x","apply","_addStory","_ref2","runInAction","d","forEach","src_store","ReactDOM","render","index_module","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29ac9ed5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nconst Stories = ({ store }) => {\n\tconst { stories } = store;\n\tconst titleInput = React.createRef();\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tstore.addStory({ title: titleInput.current.value });\n\t\ttitleInput.current.value = \"\";\n\t};\n\treturn (\n\t\t<>\n\t\t\t<h1>test</h1>\n\t\t\t<ul>\n\t\t\t\t{stories.map(story => (\n\t\t\t\t\t<li key={story.id}>{story.title}</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<label htmlFor=\"story\">\n\t\t\t\t\tStory\n\t\t\t\t\t<input type=\"text\" name=\"story\" id=\"story\" ref={titleInput} />\n\t\t\t\t</label>\n\t\t\t\t<input type=\"submit\" value=\"add\" />\n\t\t\t</form>\n\t\t</>\n\t);\n};\n\nexport default inject(\"store\")(observer(Stories));\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Stories from \"./components/Stories\";\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<h1>testing</h1>\n\t\t\t<Stories />\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import uuid from \"uuid\";\nimport { decorate, observable, action, computed } from \"mobx\";\n\nclass Story {\n\tconstructor(title, id = uuid.v4()) {\n\t\tthis.id = id;\n\t\tthis.title = title;\n\t}\n\n\tsetId = id => (this.id = id);\n\tsetTitle = value => (this.title = value);\n\n\tget values() {\n\t\treturn { title: this.title };\n\t}\n\n\tupdateFromServer = values => {\n\t\tthis.setId(values._id);\n\t\tthis.setTitle(values.title);\n\t};\n}\n\ndecorate(Story, {\n\tid: observable,\n\tsetId: action,\n\tvalues: computed,\n\ttitle: observable,\n\tsetTitle: action\n});\n\nexport default Story;\n","class Api {\n\tgetAll = async () => {\n\t\tconst r = await fetch(\"http://localhost:4000/stories\");\n\t\treturn await r.json();\n\t};\n\n\tcreate = async story => {\n\t\tconst r = await fetch(\n\t\t\t\"http://localhost:4000/stories\",\n\t\t\tthis.getOptions(\"post\", story.values)\n\t\t);\n\t\treturn await r.json();\n\t};\n\n\tgetOptions = (method, body = null) => {\n\t\tconst options = {\n\t\t\tmethod: method.toUpperCase(),\n\t\t\theaders: {\n\t\t\t\t\"content-type\": `application/json`\n\t\t\t}\n\t\t};\n\t\tif (body) {\n\t\t\toptions.body = JSON.stringify(body);\n\t\t}\n\t\treturn options;\n\t};\n}\n\nexport default Api;\n","import { decorate, observable, action, runInAction } from \"mobx\";\nimport Story from \"../models/Story\";\nimport Api from \"../api\";\n\nclass Store {\n\tstories = [];\n\n\tconstructor() {\n\t\tthis.api = new Api();\n\t\tthis.api.getAll().then(d => d.forEach(this._addStory));\n\t}\n\n\taddStory = async story => {\n\t\tconst newStory = new Story(story.title);\n\t\tthis.stories.push(newStory);\n\t\tthis.api\n\t\t\t.create(newStory)\n\t\t\t.then(storyValues => newStory.updateFromServer(storyValues));\n\t};\n\n\t_addStory = ({ title, _id }) => {\n\t\tconst story = new Story(title, _id);\n\t\trunInAction(() => this.stories.push(story));\n\t};\n}\n\ndecorate(Store, {\n\tstories: observable,\n\taddStory: action\n});\n\nexport default new Store();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"mobx-react\";\nimport store from \"./store\";\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}